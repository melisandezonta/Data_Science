print(dim(df))
# TODO: Remove mismatched rows
released.in.year = function(x){
if (is.na(x) == FALSE){
x = as.character(x)
return(as.numeric(str_sub(x,start = 1,end = 4)))
}
else {
return(x)
}
}
# Function to select only the month in the released year
released.in.month = function(x){
if (is.na(x) == FALSE){
x = as.character(x)
return(as.numeric(str_sub(x,start = 6,end = 7)))
}
else {
return(x)
}
}
# Create lists where the previous were applied
new_year = c()
new_month = c()
for (i in 1:length(df$Released)){
new_year = c(new_year,released.in.year(df$Released[i]))
new_month = c(new_month,released.in.month(df$Released[i]))
}
# Select the index of the lists (the films) which don't abide by the condition
index_remove = c()
for (i in seq(1,length(new_year))){
if (is.na(new_year[i])== FALSE){
if ((((new_year[i] == (df$Year[i]+1)) && (new_month[i] > 3))||
(new_year[i] > (df$Year[i]+1)))
|| (((new_year[i] == (df$Year[i]-1)) && (new_month[i] < 10))||
(new_year[i] < (df$Year[i]-1))))
{
index_remove = c(index_remove,i)
}
}
}
# Remove the rows
df4 = df[-index_remove,]
cat("Before removal the number of rows was", dim(df)[1], "and after it is", dim(df4)[1], ".", "The percentage of removed rows is", ((dim(df)[1]-dim(df4)[1])/dim(df)[1])*100, end="\n", file="")
df = df4
(3332-3004)/3332
# TODO(optional): Additional preprocessing
#findCorrelation(df, cutoff = .90, verbose = FALSE)
load('movies_merged')
df = movies_merged
cat("Dataset has", dim(df)[1], "rows and", dim(df)[2], "columns", end="\n", file="")
colnames(df)
library(ggplot2)
library(stringr)
library(caret)
# TODO: Remove all rows from df that do not correspond to movies`
dim(df)
df1 = subset(df,Type == "movie")
dim(df1)
df = df1
# TODO: Remove rows with missing Gross value
print(dim(df))
df = df[is.na(df$Gross) == FALSE,]
print(dim(df))
# TODO: Exclude movies released prior to 2000
print(dim(df))
df = df[df$Year >= 2000,]
print(dim(df))
# TODO: Remove mismatched rows
released.in.year = function(x){
if (is.na(x) == FALSE){
x = as.character(x)
return(as.numeric(str_sub(x,start = 1,end = 4)))
}
else {
return(x)
}
}
# Function to select only the month in the released year
released.in.month = function(x){
if (is.na(x) == FALSE){
x = as.character(x)
return(as.numeric(str_sub(x,start = 6,end = 7)))
}
else {
return(x)
}
}
# Create lists where the previous were applied
new_year = c()
new_month = c()
for (i in 1:length(df$Released)){
new_year = c(new_year,released.in.year(df$Released[i]))
new_month = c(new_month,released.in.month(df$Released[i]))
}
# Select the index of the lists (the films) which don't abide by the condition
index_remove = c()
for (i in seq(1,length(new_year))){
if (is.na(new_year[i])== FALSE){
if ((((new_year[i] == (df$Year[i]+1)) && (new_month[i] > 3))||
(new_year[i] > (df$Year[i]+1)))
|| (((new_year[i] == (df$Year[i]-1)) && (new_month[i] < 10))||
(new_year[i] < (df$Year[i]-1))))
{
index_remove = c(index_remove,i)
}
}
}
# Remove the rows
df4 = df[-index_remove,]
cat("Before removal the number of rows was", dim(df)[1], "and after it is", dim(df4)[1], ".", "The percentage of removed rows is", ((dim(df)[1]-dim(df4)[1])/dim(df)[1])*100, end="\n", file="")
df = df4
# TODO: Exclude the `Domestic_Gross` column
df = df[,-df$Domestic_Gross]
# TODO: Replace df$Runtime with a numeric column containing the runtime in minutes
# Remove_min function allowing to delete the 'mins'
remove_min = function(x){
if (x != 'NA'){
return(str_sub(x,start = 1,end = -5))
}
}
# Apply the previous function and cConversion to numeric
new = lapply(df$Runtime,remove_min)
df$Runtime = as.numeric(new)
# TODO: Print the dimensions of the final preprocessed dataset and column names
dim(df)
names(df)
library(ggplot2)
library(stringr)
library(caret)
library(lm)
install.packages("lm")
library(ggplot2)
library(stringr)
library(caret)
typeof(df)
typeof(df$Runtime)
# TODO: Replace df$Runtime with a numeric column containing the runtime in minutes
# Remove_min function allowing to delete the 'mins'
remove_min = function(x){
if (x != 'NA'){
return(str_sub(x,start = 1,end = -5))
}
}
# Apply the previous function and cConversion to numeric
new = lapply(df$Runtime,remove_min)
load('movies_merged')
df = movies_merged
cat("Dataset has", dim(df)[1], "rows and", dim(df)[2], "columns", end="\n", file="")
colnames(df)
library(ggplot2)
library(stringr)
library(caret)
# TODO: Remove all rows from df that do not correspond to movies`
dim(df)
df1 = subset(df,Type == "movie")
dim(df1)
df = df1
# TODO: Remove rows with missing Gross value
print(dim(df))
df = df[is.na(df$Gross) == FALSE,]
print(dim(df))
# TODO: Exclude movies released prior to 2000
print(dim(df))
df = df[df$Year >= 2000,]
print(dim(df))
# TODO: Remove mismatched rows
released.in.year = function(x){
if (is.na(x) == FALSE){
x = as.character(x)
return(as.numeric(str_sub(x,start = 1,end = 4)))
}
else {
return(x)
}
}
# Function to select only the month in the released year
released.in.month = function(x){
if (is.na(x) == FALSE){
x = as.character(x)
return(as.numeric(str_sub(x,start = 6,end = 7)))
}
else {
return(x)
}
}
# Create lists where the previous were applied
new_year = c()
new_month = c()
for (i in 1:length(df$Released)){
new_year = c(new_year,released.in.year(df$Released[i]))
new_month = c(new_month,released.in.month(df$Released[i]))
}
# Select the index of the lists (the films) which don't abide by the condition
index_remove = c()
for (i in seq(1,length(new_year))){
if (is.na(new_year[i])== FALSE){
if ((((new_year[i] == (df$Year[i]+1)) && (new_month[i] > 3))||
(new_year[i] > (df$Year[i]+1)))
|| (((new_year[i] == (df$Year[i]-1)) && (new_month[i] < 10))||
(new_year[i] < (df$Year[i]-1))))
{
index_remove = c(index_remove,i)
}
}
}
# Remove the rows
df4 = df[-index_remove,]
cat("Before removal the number of rows was", dim(df)[1], "and after it is", dim(df4)[1], ".", "The percentage of removed rows is", ((dim(df)[1]-dim(df4)[1])/dim(df)[1])*100, end="\n", file="")
df = df4
# TODO: Exclude the `Domestic_Gross` column
df = df[,-df$Domestic_Gross]
# TODO: Replace df$Runtime with a numeric column containing the runtime in minutes
# Remove_min function allowing to delete the 'mins'
remove_min = function(x){
if (x != 'NA'){
return(str_sub(x,start = 1,end = -5))
}
}
# Apply the previous function and cConversion to numeric
new = lapply(df$Runtime,remove_min)
df$Runtime = as.numeric(new)
typeof(df$Runtime)
typeof(df$Year)
typeof(df$Rated)
typeof(df$Metascore)
typeof(df$imdbRating)
names(df)
typeof(df$imdbVotes)
typeof(df$tomatoMeter)
typeof(df$tomatoImage)
typeof(df$tomatoRating)
typeof(df$tomatoReviews)
typeof(df$tomatoFresh)
typeof(df$tomatoRotten)
typeof(df$tomatoConsensus)
typeof(df$tomatoUserMeter)
typeof(df$tomatoUserReviews)
typeof(df$DVD)
df$DVD[,1]
df$DVD[1]
df$Production
df$Budget[1]
names(df)
# TODO: Build & evaluate model 1 (numeric variables only)
M2=lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
tomatoUserReviews + Budget + Domestic_Gross, df );
df$names(df)[1]
names(df)[1]
df[[names(df)[1]]]
# TODO: Build & evaluate model 1 (numeric variables only)
M2 = lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
tomatoUserReviews + Budget + Domestic_Gross, df );
a = df[which(typeof(df[[names(df)]]) == 'integer' || 'double')]
# TODO: Build & evaluate model 1 (numeric variables only)
M2 = lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
tomatoUserReviews + Budget + Domestic_Gross, df );
a = df[which(typeof(df[[names(df)]]) = 'integer' || 'double')]
# TODO: Build & evaluate model 1 (numeric variables only)
M2 = lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
tomatoUserReviews + Budget + Domestic_Gross, df );
a = df[,which(typeof(df[[names(df)]]) = 'integer' || 'double')]
# TODO: Build & evaluate model 1 (numeric variables only)
M2 = lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
tomatoUserReviews + Budget + Domestic_Gross, df );
a = df[,which(typeof(df[[names(df)]]) == 'integer' || 'double')]
which(typeof(df[[names(df)]]) == 'integer')
cls <- sapply(df, class)
cls
cls <- sapply(df, class)
newDF <- df %>% select(which(cls=="integer" || "double"))
library(ggplot2)
library(stringr)
library(caret)
library(dplyr)
load('movies_merged')
df = movies_merged
cat("Dataset has", dim(df)[1], "rows and", dim(df)[2], "columns", end="\n", file="")
colnames(df)
library(ggplot2)
library(stringr)
library(caret)
library(dplyr)
# TODO: Remove all rows from df that do not correspond to movies`
dim(df)
df1 = subset(df,Type == "movie")
dim(df1)
df = df1
# TODO: Remove rows with missing Gross value
print(dim(df))
df = df[is.na(df$Gross) == FALSE,]
print(dim(df))
# TODO: Exclude movies released prior to 2000
print(dim(df))
df = df[df$Year >= 2000,]
print(dim(df))
# TODO: Remove mismatched rows
released.in.year = function(x){
if (is.na(x) == FALSE){
x = as.character(x)
return(as.numeric(str_sub(x,start = 1,end = 4)))
}
else {
return(x)
}
}
# Function to select only the month in the released year
released.in.month = function(x){
if (is.na(x) == FALSE){
x = as.character(x)
return(as.numeric(str_sub(x,start = 6,end = 7)))
}
else {
return(x)
}
}
# Create lists where the previous were applied
new_year = c()
new_month = c()
for (i in 1:length(df$Released)){
new_year = c(new_year,released.in.year(df$Released[i]))
new_month = c(new_month,released.in.month(df$Released[i]))
}
# Select the index of the lists (the films) which don't abide by the condition
index_remove = c()
for (i in seq(1,length(new_year))){
if (is.na(new_year[i])== FALSE){
if ((((new_year[i] == (df$Year[i]+1)) && (new_month[i] > 3))||
(new_year[i] > (df$Year[i]+1)))
|| (((new_year[i] == (df$Year[i]-1)) && (new_month[i] < 10))||
(new_year[i] < (df$Year[i]-1))))
{
index_remove = c(index_remove,i)
}
}
}
# Remove the rows
df4 = df[-index_remove,]
cat("Before removal the number of rows was", dim(df)[1], "and after it is", dim(df4)[1], ".", "The percentage of removed rows is", ((dim(df)[1]-dim(df4)[1])/dim(df)[1])*100, end="\n", file="")
df = df4
# TODO: Exclude the `Domestic_Gross` column
df = df[,-df$Domestic_Gross]
# TODO: Replace df$Runtime with a numeric column containing the runtime in minutes
# Remove_min function allowing to delete the 'mins'
remove_min = function(x){
if (x != 'NA'){
return(str_sub(x,start = 1,end = -5))
}
}
# Apply the previous function and cConversion to numeric
new = lapply(df$Runtime,remove_min)
df$Runtime = as.numeric(new)
# TODO(optional): Additional preprocessing
#findCorrelation(df, cutoff = .90, verbose = FALSE)
# TODO: Print the dimensions of the final preprocessed dataset and column names
dim(df)
names(df)
cls <- sapply(df, class)
newDF <- df %>% select(which(cls=="integer" || "double"))
cls <- sapply(df, class)
newDF <- df %>% select(which(cls = "integer" || "double"))
cls <- sapply(df, class)
newDF <- df %>% select(which(cls == "integer" | "double"))
cls <- sapply(df, class)
newDF <- df %>% select(which(cls == "integer"))
cls <- sapply(df, class)
newDF <- df %>% select(which(cls == "integer" | cls == "double"))
names(newDF)
cls <- sapply(df, class)
newDF <- df %>% select(which(cls == "double"))
names(newDF)
cls
cls <- sapply(df, class)
newDF <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
names(newDF)
M = lm(Gross ~ numdf,df)
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
View(numdf)
names(numdf)
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf = numdf[,-Gross]
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf = numdf[[-Gross]]
numdf = numdf[[-"Gross"]]
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf$Gross = NULL
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf$Gross = NULL
numdf$Gross = df$Gross
names(numdf)
sum = sapply(seq(1,dim(df)[2]-1,by=1),function(i) rowSums(numdf[,i:(i+1)]))
numdf[,1]
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf$Gross = NULL
numdf$Gross = df$Gross
sum = sapply(seq(1,dim(numdf)[2]-1,by=1),function(i) rowSums(numdf[,i:(i+1)]))
M = lm(Gross ~ sum,numdf)
# TODO: Build & evaluate model 1 (numeric variables only)
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf$Gross = NULL
numdf$Gross = df$Gross
sum = sapply(seq(1,dim(numdf)[2]-1,by=1),function(i) rowSums(numdf[,i:(i+1)]))
M = lm(Gross ~ sum,numdf)
# M2 = lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
#          tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
#          tomatoUserReviews + Budget + Domestic_Gross, df )
theta  = coeff(M)
# TODO: Build & evaluate model 1 (numeric variables only)
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf$Gross = NULL
numdf$Gross = df$Gross
sum = sapply(seq(1,dim(numdf)[2]-1,by=1),function(i) rowSums(numdf[,i:(i+1)]))
M = lm(Gross ~ sum,numdf)
# M2 = lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
#          tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
#          tomatoUserReviews + Budget + Domestic_Gross, df )
theta  = coef(M)
# TODO: Build & evaluate model 1 (numeric variables only)
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf$Gross = NULL
numdf$Gross = df$Gross
sum = sapply(seq(1,dim(numdf)[2]-1,by=1),function(i) rowSums(numdf[,i:(i+1)]))
M = lm(Gross ~ sum,numdf)
theta  = coef(M)
# M2 = lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
#          tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
#          tomatoUserReviews + Budget + Domestic_Gross, df )
theta
# TODO: Build & evaluate model 1 (numeric variables only)
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf$Gross = NULL
numdf$Gross = df$Gross
sum = sapply(seq(1,dim(numdf)[2]-1,by=2),function(i) rowSums(numdf[,i:(i+1)]))
M = lm(Gross ~ sum,numdf)
theta  = coef(M)
# M2 = lm( Gross ~ Year + Runtime + imdbRating + imdbVotes + tomatoMeter + tomatoRating +
#          tomatoReviews + tomatoFresh + tomatoRotten + tomatoUserMeter +
#          tomatoUserReviews + Budget + Domestic_Gross, df )
theta
names(numdf)
cls <- sapply(df, class)
numdf <- df %>% select(which(cls == "integer" | cls == "double" | cls == "numeric"))
numdf$Gross = NULL
numdf$Gross = df$Gross
#sum = sapply(seq(1,dim(numdf)[2]-1,by=2),function(i) rowSums(numdf[,i:(i+1)]))
sum = (numdf[1:(ncol(numdf)-2)] + numdf[2:ncol(numdf)-1])[c(T,F)]
dim(numdf[1:(ncol(numdf)-2)])
dim(numdf[2:ncol(numdf)-1])
ncol(numdf)
dim(numdf[1:(ncol(numdf)-2)])
sum = (numdf[1:(ncol(numdf)-2)] + numdf[2:(ncol(numdf)-1)])[c(T,F)]
sum
names(df)
c = names(df)
c[1]
(names(df))[1]
for i in seq(1,dim(df)[2]-1){
car = c(car, (names(df))[i])
}
car = c()
for i in seq(1,dim(df)[2]-1){
car = c(car, (names(df))[i])
}
car = c()
for i in seq(1,dim(df)[2]-1):
car = c(car, (names(df))[i])
car = c()
for (i in seq(1,dim(df)[2]-1)){
car = c(car, (names(df))[i])
}
car
for (i in seq(1,dim(df)[2]-1)){
car = c(car, (names(df))[i])
}
StringRegExpReplace(car,","+")
car = c()
for (i in seq(1,dim(df)[2]-1)){
car = c(car, (names(df))[i])
}
car = StringRegExpReplace(car,","+")
car = StringRegExpReplace(car,","+")
car1 <- str_replace_all(car,"[[:punct:]]","+")
car = StringRegExpReplace(car,","+")
car1 <- str_replace_all(car," ","+")
car = StringRegExpReplace(car,","+")
car1 = sub("", "[+]", car)
help(sub)
car
car1 = sub("", "[+]", unlist(car))
car1
car = StringRegExpReplace(car,","+")
car1 = sub("", "+", unlist(car))
unlist(car)
car = StringRegExpReplace(car,",",+")
q
qqqqq
lknlbviytwe<r
